#property indicator_separate_window
#property indicator_buffers 3
#property indicator_plots   1
#property indicator_type1   DRAW_COLOR_LINE
#property indicator_color1 Orange,Turquoise
#property indicator_style1  STYLE_SOLID
#property indicator_width1  2
#property indicator_label1  "velocity"

enum Applied_price_     
  {
   PRICE_CLOSE_ = 1,     
   PRICE_OPEN_,          
   PRICE_HIGH_,          
   PRICE_LOW_,           
   PRICE_MEDIAN_,        
   PRICE_TYPICAL_,       
   PRICE_WEIGHTED_,      
   PRICE_SIMPLE,         
   PRICE_QUARTER_,       
   PRICE_TRENDFOLLOW0_,  
   PRICE_TRENDFOLLOW1_   
  };
  
  enum Signal_mode
  {
   Trend, 
   Kalman 
  };

input double K=1.0;                      
input Applied_price_ IPC=PRICE_WEIGHTED_;
input Signal_mode Signal=Kalman;         
input int Shift=0;                       
input int PriceShift=0;                  
double IndBuffer[],ColorBuffer[],val[];
double dPriceShift,Sqrt100,K100;
int min_rates_total;
void OnInit()
  {
   min_rates_total=2;

   Sqrt100=MathSqrt(K/100);
   K100=K/100.0;

   dPriceShift=_Point*PriceShift;

   SetIndexBuffer(2,IndBuffer,INDICATOR_DATA);
   PlotIndexSetInteger(0,PLOT_SHIFT,Shift);
   PlotIndexSetInteger(0,PLOT_DRAW_BEGIN,31);
   PlotIndexSetDouble(0,PLOT_EMPTY_VALUE,EMPTY_VALUE);

   SetIndexBuffer(1,ColorBuffer,INDICATOR_COLOR_INDEX);
   PlotIndexSetInteger(1,PLOT_DRAW_BEGIN,min_rates_total);

   string shortname;
   StringConcatenate(shortname,"KalmanFilter  velocity(",DoubleToString(K,2),")");
   IndicatorSetString(INDICATOR_SHORTNAME,shortname);
   IndicatorSetInteger(INDICATOR_DIGITS,_Digits+1);
   SetIndexBuffer(0,val,INDICATOR_DATA);
  }
int OnCalculate(const int rates_total,    // number of bars in history at the current tick
                const int prev_calculated,// number of bars calculated at previous call
                const datetime &time[],
                const double &open[],
                const double& high[],     // price array of maximums of price for the indicator calculation
                const double& low[],      // price array of minimums of price for the indicator calculation
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
  {
   if(rates_total<min_rates_total)return(0);

   int first,bar;
   double Velocity,Distance,Error;
   static double Velocity_;


   if(prev_calculated>rates_total || prev_calculated<=0) 
     {
      first=1; 
      IndBuffer[first-1]=PriceSeries(IPC,first-1,open,low,high,close);
      Velocity_=0.0;
     }
   else first=prev_calculated-1; 

   Velocity=Velocity_;

   for(bar=first; bar<rates_total; bar++)
     {
      if(rates_total!=prev_calculated && bar==rates_total-1)
        {
         Velocity_=Velocity;
        }

      Distance=PriceSeries(IPC,bar,open,low,high,close)-IndBuffer[bar-1];
      Error=IndBuffer[bar-1]+Distance*Sqrt100;
      Velocity+=Distance*K100;
      IndBuffer[bar]=Error+Velocity+dPriceShift;
      val[bar]=Velocity;

      if(Signal==Trend)
        {
         if(IndBuffer[bar-1]>IndBuffer[bar]) ColorBuffer[bar]=0;
         else ColorBuffer[bar]=1;
        }
      else
        {
         if(Velocity>0) ColorBuffer[bar]=1;
         else           ColorBuffer[bar]=0;
        }
     }
   return(rates_total);
  }

double PriceSeries(uint applied_price,uint   bar,const double &Open[],const double &Low[],const double &High[],const double &Close[])
  {
   switch(applied_price)
     {
      case  PRICE_CLOSE: return(Close[bar]);
      case  PRICE_OPEN: return(Open [bar]);
      case  PRICE_HIGH: return(High [bar]);
      case  PRICE_LOW: return(Low[bar]);
      case  PRICE_MEDIAN: return((High[bar]+Low[bar])/2.0);
      case  PRICE_TYPICAL: return((Close[bar]+High[bar]+Low[bar])/3.0);
      case  PRICE_WEIGHTED: return((2*Close[bar]+High[bar]+Low[bar])/4.0);

      case  8: return((Open[bar] + Close[bar])/2.0);
      case  9: return((Open[bar] + Close[bar] + High[bar] + Low[bar])/4.0);
      case 10:
        {
         if(Close[bar]>Open[bar])return(High[bar]);
         else
           {
            if(Close[bar]<Open[bar])
               return(Low[bar]);
            else return(Close[bar]);
           }
        }
      case 11:
        {
         if(Close[bar]>Open[bar])return((High[bar]+Close[bar])/2.0);
         else
           {
            if(Close[bar]<Open[bar])
               return((Low[bar]+Close[bar])/2.0);
            else return(Close[bar]);
           }
         break;
        }
      default: return(Close[bar]);
     }
  }
//+------------------------------------------------------------------+
