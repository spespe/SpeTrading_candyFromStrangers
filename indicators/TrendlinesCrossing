#property description "Trend Lines Crossing"
#include <ChartObjects\ChartObjectsTxtControls.mqh>
#property indicator_chart_window

struct lineData {
   string name;
   double curPrice;
   bool crossing;
   int counter;
};

enum SIG_MODE {
   NO_SIG,        
   ONLY_SOUND,    
   ALERT          
};

input SIG_MODE InpSignalMode = ONLY_SOUND;      // Signal mode
input int      InpPause = 3;                    // Seconds between signals
input int      InpSignals = 5;                  // Signals Quantity
input string   InpSoundName = "alarm.wav";      // Sound Filename
input bool     InpShowInfo = true;              // Show Lines Info
input string   InpLabelPrefix = "Tsl_Label_";   // Label name prefix
int            pause;
int            signals;
string         fileName;
string         labelPrefix;
int            prefixLen;
string         btnName;
//---
lineData             lines[];
CChartObjectButton   updateBtn;
CChartObjectLabel    header[2];
CChartObjectLabel    nameLabels[];
CChartObjectLabel    priceLabels[];


int OnInit() {
   if ( InpPause < 1 || InpPause > 60 ) {
      pause = 5;
      printf("Incorrected input parameter InpPause = %d. Indicator will use value %d.", InpPause, pause);
   } else {
      pause = InpPause;
   }
   if ( InpSignals < 1 || InpSignals > 50 ) {
      signals = 5;
      printf("Incorrected input parameter InpSignals = %d. Indicator will use value %d.", InpSignals, signals);
   } else {
      signals = InpSignals;
   }
   if ( FileIsExist(InpSoundName, 0) == false ) {
      fileName = "alert.wav";
      printf("The file named %s does not exist. Indicator will use file %s", InpSoundName, fileName);
   } else {
      fileName = "\\Files\\" + InpSoundName;
   }
   prefixLen = StringLen(InpLabelPrefix);
   if ( prefixLen < 5 ) {
      labelPrefix = "Tsl_Label_";
      prefixLen = StringLen(labelPrefix);
      printf("Incorrected input parameter InpLabelPrefix = %s. Indicator will use value %s.", InpLabelPrefix, labelPrefix);
   } else {
      labelPrefix = InpLabelPrefix;
   }
   btnName = labelPrefix + "UpdateButton";
   deleteIndLabels();
   if ( InpShowInfo ) {
      createButton();
   }
   ChartSetInteger(0, CHART_EVENT_OBJECT_DELETE, true);
   EventSetTimer(pause);
   return(0);
}

void OnDeinit(const int reason) {
   deleteIndLabels();
   if ( ObjectFind(0, btnName) == 0 ) {
      ObjectDelete(0, btnName);
   }
   EventKillTimer();
}

void createButton() {
   if ( ObjectFind(0, btnName) < 0 ) {
      int sy = (ChartGetInteger(0, CHART_SHOW_OHLC)) ? 26 : 10;
      
      updateBtn.Create(0, btnName, 0, 10, sy, 100, 20);
      updateBtn.Description("Update Info");
      updateBtn.Color(clrGreen);
      updateBtn.FontSize(8);
   }
}

void updateInfo() {
   datetime time[1];
   if ( CopyTime(_Symbol, _Period, 0, 1, time) != 1 ) {
      Print("CopyTime Failed. Error #", GetLastError());
      return;
   }
   checkTrendLines(time[0]);
}

void deleteIndLabels() {
   int total = ObjectsTotal(0, 0, OBJ_LABEL);
   
   for ( int i = 0; i < total; i++ ) {
      string name = ObjectName(0, i, 0, OBJ_LABEL);
      
      if ( StringSubstr(name, 0, prefixLen) == labelPrefix ) {
         ObjectDelete(0, name);
      }
   }
   ChartRedraw();
}

void checkTrendLines(datetime time) {
   int total = ObjectsTotal(0, 0, OBJ_TREND);
   ArrayFree(lines);
   ArrayResize(lines, total);
   for ( int i = 0; i < total; i++ ) {
      lines[i].name = ObjectName(0, i, 0, OBJ_TREND);
      lines[i].curPrice = NormalizeDouble(ObjectGetValueByTime(0, lines[i].name, time), _Digits+1);
      lines[i].crossing = false;
      lines[i].counter = 0;
   }
   if ( InpShowInfo ) {
      showInfo(total);
   }
}


