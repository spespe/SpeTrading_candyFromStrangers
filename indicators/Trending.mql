#property indicator_chart_window
#property indicator_buffers 7
#property indicator_plots   2
#property indicator_type1   DRAW_COLOR_BARS
#property indicator_type2   DRAW_COLOR_LINE
#property indicator_style2  STYLE_DOT

input int     inpPeriod       = 21; 
input double  inpMultiplier   = 3; 
input int     inpChannelShift = 1;
enum enDisplayMode
{
   disp_bars,   
   disp_candles 
};
input enDisplayMode inpDisplayMode = disp_bars; 

double baro[],barh[],barl[],barc[],barcl[],line[],linecl[];
int _minMaxPeriod;

//------------------------------------------------------------------
// Inizialization function
//------------------------------------------------------------------

int OnInit()
{
   SetIndexBuffer(0,baro  ,INDICATOR_DATA);
   SetIndexBuffer(1,barh  ,INDICATOR_DATA);
   SetIndexBuffer(2,barl  ,INDICATOR_DATA);
   SetIndexBuffer(3,barc  ,INDICATOR_DATA);
   SetIndexBuffer(4,barcl ,INDICATOR_COLOR_INDEX);
   SetIndexBuffer(5,line  ,INDICATOR_DATA);
   SetIndexBuffer(6,linecl,INDICATOR_COLOR_INDEX);
      PlotIndexSetInteger(0,PLOT_DRAW_TYPE, inpDisplayMode==disp_bars ? DRAW_COLOR_BARS : DRAW_COLOR_CANDLES);
  
      
      _minMaxPeriod = MathMax(inpPeriod-1,0);
      iLwma.init(inpPeriod);
   
   IndicatorSetString(INDICATOR_SHORTNAME,StringFormat("Trading the trend (%i,%.1f shift %i)",inpPeriod,inpMultiplier,inpChannelShift));
   return (INIT_SUCCEEDED);
}
void OnDeinit(const int deinitial) {}


//------------------------------------------------------------------
// OnCalculate function
//------------------------------------------------------------------

int OnCalculate(
const intrates_total,
const intprev_calculated,
const datetime&time[],
const double&open[],
const double&high[],
const double&low[],
const double&close[],
const long&tick_volume[],
const long&volume[],
const int&spread[])
{
   int limit=prev_calculated-1; if (limit<0) limit = 0;
       static datetime prevTime = -1;
       static double   prevMax, prevMin;

   int i=limit; for(; i<rates_total && !_StopFlag; i++)
   {
      if (prevTime!=time[i])
      {
         prevTime = time[i];
         int _start = i-inpPeriod-inpChannelShift+1; 
         if (_start<0) _start=0;
               prevMax  = close[ArrayMaximum(close,_start,_minMaxPeriod)];
               prevMin  = close[ArrayMinimum(close,_start,_minMaxPeriod)];
      }        
      
          
         double h = (close[i]>prevMax) ? close[i] : prevMax;
         double l = (close[i]<prevMin) ? close[i] : prevMin;
         double rh = (i>0) ? (high[i]>close[i-1] ? high[i] : close[i-1]) : high[i];
         double rl = (i>0) ? (low[i] <close[i-1] ? low[i]  : close[i-1]) : low[i];
         double tr      = iLwma.calculate(rh-rl,i,rates_total);
         double hLim = h-tr*inpMultiplier;
         double lLim = l+tr*inpMultiplier;

               
      line[i]   = (close[i]>lLim && close[i]>hLim) ? hLim : (close[i]<lLim && close[i]<hLim) ? lLim : (i>0) ? line[i-1] : close[i];
      linecl[i] = (close[i]>line[i]) ? 1 : (close[i]<line[i]) ? 2 : (i>0) ? linecl[i-1] : 0;
      barh[i]   = high[i];
      barl[i]   = low[i];
      barc[i]   = close[i];
      baro[i]   = open[i];
      barcl[i]  = linecl[i];
   }
   return (i);
}

class C_lwma
{
private :
  struct sLwmaArrS
    {
      double value;
      double wsumm;
      double vsumm;
    };
  sLwmaArrayStruct m_array[];
  int              m_arraySize;
  int              m_period;
  double           m_weight;
public :
  C_lwma(): m_period(1), m_arraySize(-1), m_weight(1) { }
 ~C_lwma()                                            { }
}


