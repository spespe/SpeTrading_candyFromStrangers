input int bands_period= 20;        // Bollinger Bands period
input int dema_period= 20;         // DEMA period
input int bands_shift = 0;         // Bollinger Bands shift
input double deviation= 2;         // Standard deviation
input double   Lot=0.5;            // Lots to trade

//--- global variables
int BolBandsHandle;                // Bolinger Bands handle
int demaHandle;                    // DEMA handle
double BBUp[],BBLow[],BBMidle[];   // dynamic arrays for numerical values of Bollinger Bands
double demaVal[];                  // dynamic array for numerical values of Moving Average 

//OnInit method
int OnInit()
  {
   if(Bars(_Symbol,_Period)<60) 
     {
      Alert("Less than 60 bars available!!");
      return(-1);
     }
   BolBandsHandle=iBands(NULL,PERIOD_M30,bands_period,bands_shift,deviation,PRICE_CLOSE);
   demaHandle=iDEMA(NULL,PERIOD_D1,dema_period,0,PRICE_CLOSE);
   if((BolBandsHandle<0) || (demaHandle<0))
     {
      Alert("Error in creation of indicators - error: ",GetLastError(),"!!");
      return(-1);
     }

   return(0);
  }

//Deinitialization method
void OnDeinit(const int reason)
  {
   IndicatorRelease(BolBandsHandle);
   IndicatorRelease(demaHandle);
  }

//OnTick method  
void OnTick()
  {
   static datetime Old_Time;
   datetime New_Time[1];
   bool IsNewBar=false;

   int copied=CopyTime(_Symbol,_Period,0,1,New_Time);
   if(copied>0) 
     {
      if(Old_Time!=New_Time[0]) 
        {
         IsNewBar=true;   
         if(MQL5InfoInteger(MQL5_DEBUGGING)) Print("New bar",New_Time[0],"previous time",Old_Time);
         Old_Time=New_Time[0];            
        }
     }
   else
     {
      Alert("Historicak data error",GetLastError());
      ResetLastError();
      return;
     }

   if(IsNewBar==false)
     {
      return;
     }

   int Mybars=Bars(_Symbol,_Period);
   if(Mybars<60) 
     {
      Alert("Not enough bars to start!");
      return;
     }

   MqlRates mrate[];          

   //Storing data into Arrays
   ArraySetAsSeries(mrate,true);
   ArraySetAsSeries(demaVal,true);
   ArraySetAsSeries(BBUp,true);
   ArraySetAsSeries(BBLow,true);
   ArraySetAsSeries(BBMidle,true);

   if(CopyRates(_Symbol,_Period,0,3,mrate)<0)
     {
      Alert("Error copying last 3 bars: ",GetLastError(),"!!");
      return;
     }

   if(CopyBuffer(BolBandsHandle,0,0,3,BBMidle)<0 || CopyBuffer(BolBandsHandle,1,0,3,BBUp)<0
      || CopyBuffer(BolBandsHandle,2,0,3,BBLow)<0)
     {
      Alert("Error copying inidicator (BB) data: ",GetLastError(),"!!");
      return;
     }

   if(CopyBuffer(demaHandle,0,0,3,demaVal)<0)
     {
      Alert("Error copying indicator (DEMA) data: ",GetLastError());
      return;
     }

   double Ask = SymbolInfoDouble(_Symbol,SYMBOL_ASK);   
   double Bid = SymbolInfoDouble(_Symbol,SYMBOL_BID);   

